/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "platform.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xintc_l.h"

#define NUM_INPUT 48 // Resolution of image
#define NUM_OUTPUT 3 // 3 possible outputs: "Left Dab", "Right Dab", "No Dab"
#define NUM_HIDDEN 4

double sigmoid_func(double input) {
	return 1.0/(1.0 + exp(-input));
}

volatile unsigned int * led = (unsigned int *)0x40000000;
volatile unsigned int * vga = (unsigned int *)0x40010000;
volatile unsigned int * data = (unsigned int *)0x40600000;

int main() {
	init_platform();

	double weightInputHidden[NUM_INPUT+1][NUM_HIDDEN] = { // Generated by TensorFlow
		{6.126232910901308060e-03,-6.379263475537300110e-03,-6.194730289280414581e-03},
		{4.717337712645530701e-02,-3.577071428298950195e-02,-1.522803958505392075e-02},
		{6.242331862449645996e-02,-4.299988970160484314e-02,-1.249259524047374725e-02},
		{4.944730922579765320e-02,-2.722722478210926056e-02,-1.422251667827367783e-02},
		{2.687530778348445892e-02,-1.675059832632541656e-02,-5.514172837138175964e-03},
		{7.288462668657302856e-02,-3.125212714076042175e-02,-2.105859294533729553e-02},
		{3.348936140537261963e-02,-4.090651869773864746e-02,-2.879173727706074715e-03},
		{2.946460060775279999e-02,-3.823237121105194092e-02,9.739289060235023499e-03},
		{1.243668235838413239e-02,-8.991027250885963440e-03,-2.003930136561393738e-02},
		{5.276964604854583740e-02,2.304078452289104462e-02,-5.653966963291168213e-02},
		{4.267648980021476746e-02,1.159988716244697571e-01,-6.679673492908477783e-02},
		{1.260991115123033524e-02,1.604607515037059784e-02,-1.248798146843910217e-02},
		{4.847831279039382935e-02,-6.400582194328308105e-02,-1.653059269301593304e-03},
		{-1.707180775701999664e-02,-3.544682636857032776e-02,4.133054241538047791e-02},
		{-1.549939513206481934e-01,-8.817515522241592407e-02,1.419529020786285400e-01},
		{1.516955345869064331e-02,-7.668951898813247681e-02,4.059826955199241638e-02},
		{5.611495673656463623e-02,-1.667401939630508423e-02,-2.126409858465194702e-02},
		{-6.177472695708274841e-02,9.469906985759735107e-02,-8.692730963230133057e-02},
		{-1.929550021886825562e-01,2.898708581924438477e-01,-1.853147000074386597e-01},
		{5.188924819231033325e-02,-5.021030828356742859e-02,-1.889299787580966949e-02},
		{1.471157837659120560e-02,-2.325997315347194672e-02,1.064639072865247726e-02},
		{-2.356591261923313141e-02,2.278510015457868576e-03,1.367115695029497147e-02},
		{-1.642868220806121826e-01,-1.354487389326095581e-01,1.970600485801696777e-01},
		{-6.979471445083618164e-02,-1.132119745016098022e-01,1.042408794164657593e-01},
		{6.523977965116500854e-02,-2.726045064628124237e-02,-1.463617384433746338e-02},
		{-8.600837737321853638e-02,8.838550746440887451e-02,-3.709696233272552490e-02},
		{-1.815798878669738770e-01,1.956395059823989868e-01,-9.135444462299346924e-02},
		{4.580697417259216309e-02,-8.986129611730575562e-02,4.770446568727493286e-02},
		{-7.199762389063835144e-03,2.839363180100917816e-02,8.371997624635696411e-03},
		{-4.647342488169670105e-02,3.580237552523612976e-02,5.380371958017349243e-02},
		{-1.681132167577743530e-01,-2.557156421244144440e-02,1.205664500594139099e-01},
		{-3.799872845411300659e-02,-3.519612923264503479e-02,6.653485447168350220e-02},
		{5.494038015604019165e-02,-3.077803924679756165e-02,-9.471312165260314941e-03},
		{2.832813747227191925e-02,2.003139629960060120e-02,-3.289682045578956604e-02},
		{-9.677102416753768921e-02,1.457357406616210938e-01,-4.058350995182991028e-02},
		{-3.126300498843193054e-02,1.028573326766490936e-02,4.115981608629226685e-02},
		{5.349675193428993225e-02,-3.449264168739318848e-02,-2.732186019420623779e-02},
		{1.819781213998794556e-01,6.364843994379043579e-02,-2.077401280403137207e-01},
		{2.789654582738876343e-02,9.326384402811527252e-03,-2.515184134244918823e-02},
		{5.343092978000640869e-02,-2.390650659799575806e-02,-1.478005759418010712e-02},
		{6.705141067504882812e-02,-2.184335887432098389e-02,-1.975263841450214386e-02},
		{4.606872797012329102e-02,-5.429434822872281075e-04,-3.117275796830654144e-02},
		{-6.690201163291931152e-02,9.600632637739181519e-02,-3.741882741451263428e-02},
		{-1.461270004510879517e-01,1.606437936425209045e-02,1.139006912708282471e-01},
		{2.471803128719329834e-02,2.221699245274066925e-02,-3.003204986453056335e-02},
		{-9.595248103141784668e-02,-4.089045152068138123e-02,1.203548237681388855e-01},
		{-1.506245285272598267e-01,1.030507236719131470e-01,1.309655047953128815e-02},
		{-3.679086640477180481e-02,-3.236597031354904175e-02,3.716958686709403992e-02},
		{5.501641750335693359e+00,-4.878894329071044922e+00,-4.974684715270996094e+00}
	};
	double weightHiddenOutput[NUM_HIDDEN+1][NUM_OUTPUT] = { // Generated by TensorFlow
		{-1.055943250656127930e+00,-1.008380055427551270e+00,2.064632654190063477e+00},
		{2.274150371551513672e+00,-1.222083687782287598e+00,-1.052107930183410645e+00},
		{-1.225038886070251465e+00,2.232423067092895508e+00,-1.007524132728576660e+00},
		{1.959574371576309204e-01,1.033019945025444031e-01,-2.098435610532760620e-01}
	};

	/* RANDOM DAB GENERATOR */
	// Next dance move:	1 = left dab, 2 - right dab
	int nextMove = (rand() %3);

	// Display the next dance move
	*vga = nextMove;

	// Score
	int score = 0;

	while(1) {
		int i = NUM_INPUT;
		int j;
		int delimitCheck = 3;
		int input[NUM_INPUT];

		// Check for "F7F7F7" to indicate start of new image
		while(delimitCheck) {
			unsigned int inp;
			unsigned int formattedInp;
			inp = XUartLite_RecvByte(XPAR_UARTLITE_0_BASEADDR);
			formattedInp = inp&0xFF;
			if ((formattedInp == 0x7F)&&(delimitCheck > 0))
				delimitCheck--;
		};

		// Transfer image, each byte represents intensity value of 0-127 for each pixel in the image
		while(i) {
			unsigned int inp;
			unsigned int formattedInp;
			inp = XUartLite_RecvByte(XPAR_UARTLITE_0_BASEADDR);
			formattedInp = inp&0xFF;
			input[NUM_INPUT-i] = formattedInp;
			i--;
		};

		// Propagate image through neural network
		double hiddenLayer[NUM_HIDDEN] = {0};
		double outputLayer[NUM_OUTPUT] = {0};

		double sumHidden[NUM_HIDDEN] = {0};
		double sumOutput[NUM_OUTPUT] = {0};

		for (j = 0; j < NUM_HIDDEN; j++) {
			sumHidden[j] = weightInputHidden[NUM_INPUT][j];
			for (i = 0; i < NUM_INPUT; i++) {
				sumHidden[j] += (double)input[i]*weightInputHidden[i][j];
			}
			hiddenLayer[j] = sigmoid_func(sumHidden[j]);
		}
		for (j = 0; j < NUM_OUTPUT; j++) {
			sumOutput[j] = weightHiddenOutput[NUM_HIDDEN][j];
			for (i = 0; i < NUM_HIDDEN; i++) {
				sumOutput[j] += hiddenLayer[i]*weightHiddenOutput[i][j];
			}
			outputLayer[j] = sigmoid_func(sumOutput[j]);
		}

		// Check which move is most likely given the data
		double maximum = outputLayer[0];
		int location = 0;
		for (i = 1; i < NUM_OUTPUT; i++) {
			if (outputLayer[i] > maximum) {
				maximum = outputLayer[i];
				location = i;
			}
		}

		// Check whether certainty is enough to make determination of successful move
		switch(location) {
			case 0: // Left Dab
				if (maximum>0.75){
					//*led = 0x4;
					if (nextMove == 1){
						// they did the correct dance move
						// generate next dance move and display it
						score++;
						nextMove = (rand() %3);
						*vga = nextMove;
						*led = score;
					}
					//*vga = 0x1;
				} else {

					if (nextMove == 0){
											score++;
											nextMove = (rand() %3);
											*vga = nextMove;
											*led = score;
										}
				}
			break;
			case 1: // Right Dab
				if (maximum>0.75){
					//*led = 0x1;
					if (nextMove == 2){
						// they did the correct dance move
						// generate next dance move and display it
						score++;
						nextMove = (rand() %3);
						*vga = nextMove;
						*led = score;
					}
					//*vga = 0x2;
				}
				else{
					if (nextMove == 0){
											score++;
											nextMove = (rand() %3);
											*vga = nextMove;
											*led = score;
										}
				}
			break;
			case 2: // No move

					//*led = 0x0;
					if (nextMove == 0){
						score++;
						nextMove = (rand() %3);
						*vga = nextMove;
						*led = score;
					}
					//*vga = 0x0;


			break;
			default:
				*led = 0x0;
				*vga = 0x0;
			break;
		}
	};
	return 0;
}
